from odoo import http, fields
from odoo.http import request
import logging

_logger = logging.getLogger(__name__)

class WebsiteSaleDevis(http.Controller):

    @http.route('/shop/remove_order', type='http', auth='public', methods=['POST'], csrf=False, website=True)
    def remove_order(self, **post):
        order = request.website.sale_get_order()
        if order:
            order.sudo().unlink()
            request.session.update({'sale_order_id': None})
            request.website.sale_reset()
            _logger.info("‚úÖ Panier supprim√© via popup JS")
            return http.Response(status=200)
        _logger.warning("‚ùå Aucun panier √† supprimer")
        return http.Response(status=204)



    @http.route('/shop/confirm_devis', type='http', auth="public", website=True, methods=['POST'])
    def confirm_devis(self, **post):

        if request.httprequest.method != 'POST':
            return request.redirect('/shop/cart')

        """Enregistrer la demande de devis avec les informations suppl√©mentaires"""
        _logger.info("D√©but du processus de confirmation de devis")

        # R√©cup√©rer les informations suppl√©mentaires envoy√©es par le formulaire
        extra_info = post.get('extra_info', '').replace('\n', '<br/>')
        _logger.info(f"Valeur re√ßue pour extra_info: {extra_info}")

        # R√©cup√©rer la commande du panier
        order = request.website.sale_get_order()
        if not order or not order.order_line:
            _logger.warning("Aucune commande trouv√©e ou panier vide")
            return request.redirect('/shop/cart')

        _logger.info(f"Commande trouv√©e : ID {order.id}, Partner ID : {order.partner_id.id}")

        # R√©cup√©rer le client (partner_id) li√© √† la commande
        partner = order.partner_id

        #üîπ R√©cup√©rer l'√©quipe CRM d√©finie dans la configuration pour la demande de devis
        crm_team_demande_id = request.env['ir.config_parameter'].sudo().get_param('website.crm_team_demande')
        crm_team_demande = request.env['crm.team'].sudo().browse(
            int(crm_team_demande_id)) if crm_team_demande_id else None

        # V√©rifier si l'√©quipe CRM existe bien
        if not crm_team_demande or not crm_team_demande.exists():
            crm_team_demande = None

        # Cr√©er la demande de devis avec `extra_info`
        demande = request.env['demande.devis'].sudo().create({
            'name': f"Demande de devis - {partner.name}",
            'partner_id': partner.id,
            'extra_info': extra_info,
            'devis_creation_date': fields.Datetime.now(),
        })
        _logger.info(f"Demande de devis cr√©√©e : ID {demande.id}, Extra Info : {extra_info}")

        # Cr√©ation de l'opportunit√© CRM
        opportunity = request.env['crm.lead'].sudo().create({
            'name': f"Opportunit√© - {partner.name}",
            'partner_id': partner.id,
            'email_from': partner.email,
            'phone': partner.phone,
            'description': f"{extra_info}",
            'type': 'opportunity',
            'user_id': crm_team_demande.user_id.id if crm_team_demande and crm_team_demande.user_id else request.env.ref('base.user_admin').id,
            'team_id': crm_team_demande.id if crm_team_demande else False,
        })
        _logger.info(
            f"Opportunit√© CRM cr√©√©e : ID {opportunity.id}, Associ√©e au partenaire {partner.name}, √âquipe CRM : {crm_team_demande.name if crm_team_demande else 'Aucune'}")

        # Ajouter les lignes de produits √† l'opportunit√©
        for line in order.order_line:
            request.env['crm.lead.line'].sudo().create({
                'lead_id': opportunity.id,
                'product_id': line.product_id.id,
                'product_uom_qty': line.product_uom_qty,
                'price_unit': line.price_unit,
            })

        _logger.info("Lignes de produits ajout√©es √† l'opportunit√© CRM")

        # Ajouter les lignes de commande dans la demande de devis
        for line in order.order_line:
            request.env['demande.devis.line'].sudo().create({
                'demande_id': demande.id,
                'product_id': line.product_id.id,
                'product_uom_qty': line.product_uom_qty,
                'price_unit': line.price_unit,
            })

        # Supprimer la commande et r√©initialiser la session du panier
        order.sudo().unlink()
        request.session.update({'sale_order_id': None})  # R√©initialisation du panier
        request.website.sale_reset()  # Mise √† jour du nombre d'articles dans l'ic√¥ne du panier
        _logger.info("Le panier a √©t√© r√©initialis√©")

        # Redirection vers la page de confirmation
        return request.redirect('/shop/confirmationpage')

    @http.route('/shop/confirmationpage', type='http', auth="public", website=True)
    def confirmation_page(self, **kwargs):
        """Affiche la page de confirmation apr√®s enregistrement du devis"""
        _logger.info("Affichage de la page de confirmation")
        return request.render("custom_website_creator.confirmation_page", {})

    @http.route('/shop/add_to_devis', type='http', auth="public", website=True, methods=['POST'])
    def add_to_devis(self, **post):
        # R√©cup√©rer la commande en cours (panier)
        order = request.website.sale_get_order()

        # V√©rifier si la commande existe
        if order:
            _logger.info(f"Panier existant trouv√©: ID {order.id}")

            # Supprimer la commande existante
            order.sudo().unlink()
            _logger.info(f"Commande {order.id} supprim√©e automatiquement")

        # Ajouter le produit au panier (logique par d√©faut d'Odoo)
        # Vous pouvez impl√©menter ici la logique d'ajout au panier ou utiliser le m√©canisme de base d'Odoo

        # Renvoyer une r√©ponse ou rediriger vers la page de confirmation
        return request.redirect('/shop/cart')
